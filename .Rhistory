summarize_vector <- function(nums) {
result <- list(
mean <- mean(nums),
median <- median(nums),
length <- length(nums)
)
return(result)
}
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,       PROBLEm
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro, locale = "en")
print(capitalized_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, 'Hello, my name is', 'Hey, I\'m')                        ######PROBLEM
print(casual_intro)
loud_intro <- toupper(my_intro)
casual_intro <- gsub('Hello, my name is', 'Hey, I\'m', my_intro)                        ######PROBLEM
print(casual_intro)
with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', 'Hey, I\'m', my_intro)                        ######PROBLEM
print(casual_intro)
with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', 'Hey, I\'m', my_intro)                        ######PROBLEM
print(casual_intro)
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
make_introduction <- function(name, age) { # problem with '
return(paste('Hello, my name is ', name, ', and I\'m ', age, ' years old', sep = ''))
}
make_introduction <- function(name, age) { # problem with '
return(paste('Hello, my name is ', name, ', and I\'m ', age, ' years old', sep = ''))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction('yichi', 21)
print(my_intro)
# Create a variable `cas
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return (strings <- gsub('[[:digit:]]+', '', strings))
}
v <- c('a20', '22q', '222f')
print(remove_digits(v))
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) { # problem with '
return(paste("Hello, my name is ", name, ", and I\'m ", age, " years old", sep = ""))
}
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) { # problem with '
return(paste("Hello, my name is ", name, ", and I\'m ", age, " years old", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction('yichi', 21)
print(my_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub('Hello, my name is', "hey, I\'m", my_intro)                        ######PROBLEM
print(casual_intro)
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
print(loud_intro)
quiet_intro <- tolower(my_intro)
print(quiet_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,       PROBLEm
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro, locale = "en")
print(capitalized_intro)
library(stringr)
library("stringr")
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,       PROBLEm
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro, locale = "en")
print(capitalized_intro)
occurrences <- str_count(my_intro, 'e')
print(occurrences)
library("stringr")
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, 'e')
print(occurrences)
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
cube <- function(num) {
return(num * num * num)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inch) {
return(inch * 2.54)
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 66.9
# Using your `inches_to_cm`
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inch) {
return(inch * 2.54)
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 66.9
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
print(cm_tall)
return (strings <- sub('[[:digit:]]+', '', strings))
}
v <- c('a20', '22q', '222f')
print(remove_digits(v))
(i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', '', strings))
}
v <- c('a20', '22q', '222f')
(i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', '', strings))
}
v <- c('a20', '22q', '222f')
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', "", strings))
}
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', "", strings))
}
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', "", strings))
}
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', "", strings))
}
v <- c('a20', '22q', '222f')
print(remove_digits(v))
remove_digits <- function(strings) {
return (strings <- sub('[[:digit:]]+', "", strings))
}
v <- c('a20', '22q', '222f')
print(remove_digits(v))
# `has_more_zs` function
more_zs <- has_more_zs("ooooooo ia amaing!", "Yichiang love boba")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return (strings <- gsub('[[:digit:]]+', "", strings))
}
v <- c('a20', '22q', '222f')
print(remove_digits(v))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For exa
has_more_zs <- function(str1, str2) {
num1 <- str_count(tolower(str1), "z")
num2 <- str_count(tolower(str2), "z")
if(num1 < num2) {
return(str2)
} else if (num1 > num2) {
return(str1)
} else if(num1 == 0 & num2 == 0) {
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("ooooooo ia amaing!", "Yichiang love boba")
print(more_zs)
movies <- c("Shawshank's redemption", "goal", "Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Shawshank's redemption", "goal","Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a grea
movies <- c("Shawshank's redemption", "goal","Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste0(movies, " is a great movie!")
print(excited)
ou should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Shawshank's redemption", "goal", "Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
excited <- paste0(movies, " is a great movie!")
print(excited)
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
print(without_four)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, 4)
print(multiples_of_4)
wn to only elements that are divisible by 8.
filter <- c(FALSE, TRUE)
multiples_of_8 <- multiples_of_4[filter]
print(multiples_of_8)
sing the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
print(numbers_len)
equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
print(numbers_mean)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
print(higher_numbers)
return(result)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(nums <- seq(1, 100))
print(summary_1_to_100)
styler:::set_style_transformers()
movies <- c("Shawshank's redemption", "goal", "Slience lamb", "Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
print(movies)
movies <- c("Shawshank's redemption", "dddd", "ddddd") ### TOO LONG
print(movies)
lintr:::addin_lint()
lintr:::addin_lint()
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_vector <- c("a20", "2223q", "222f")
print(remove_digits(test_vector)
return (input_vector <- gsub('[[:digit:]]+', "", input_vector))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_vector <- c("a20", "2223q", "222f")
print(remove_digits(test_vector))
movies <- c("Shawshank's redemption", "goal", "Slience lamb",
"Horse's whisper", "Whiplash", "Titantic") ### TOO LONG
print(movies)
# Create a vector
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, ", and I\'m ",
age, " years old", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("yichi", 21)
print(my_intro)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library("stringr")
library("styler")
library("styler")
style_file("assignment.R")
# (you'll need to install it if you hav
install.packages("styler")
library("stringr")
library("styler")
style_file("assignment.R")
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# Load the the `stringr` package
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Load the the `stringr` package
library("stringr")
library("styler")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
lintr:::addin_lint()
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_vector <- c("a20a2", "2223q", "222f")
print(remove_digits(test_vector))
# Vectors -------------------------
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
library("stringr")
style_file("C:\\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Load the the `stringr` package
library("stringr")
style_file("C:\\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
library("stringr")
style_file("C:\Users\Yichi Zhang\OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW\Soporhmre\Q1\info 201\a2\a2-azerous1\assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
# (you'll need to install it if you haven't used it before)
# Load the the `stringr` package
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
lintr:::addin_lint()
styler:::set_style_transformers()
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
# (you'll need to install it if you haven't used it before)
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
library("stringr")
style_file("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/a2/a2-azerous1/assignment.R")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
Florida <- carData::Florida
View(Florida)
num <- nrow(Florida[Florida$GORE > Florida$BUSH,])
print(num)
num <- nrow(Florida[,Florida$GORE > Florida$BUSH])
print(num)
num <- nrow(Florida[,Florida$GORE > Florida$BUSH])
print(num)
install.packages("titantic")
install.packages(titantic)
install.packages(Titanic)
install.packages(Titanic)
titanic_df <- Titanic
titanic_df <- Titanic
View(titanic_df)
children <- Filter(titanic_df, age == "child")
children <- filter(titanic_df, age == "child")
children <- filter(titanic_df, Age == "child")
children <- titanic_df[titanic_df$age == "child"]
mation about the number children on the Titanic.
children <- titanic_df[titanic_df$age == "child"]
children <- titanic_df[titanic_df$age == "child"]
xxx <- titanic_df$age
xxx <- titanic_df$Age
xxx <- titanic_df[["Age"]]
install.packages(dylpr)
install.packages("dylpr")
install.packages("dplyr")
# with information about the number children on the Titanic.
children <- titanic_df[titanic_df$age == "child"]
children <- filter_al
xxx <- titanic_df[["Age"]]
install.packages("dplyr")
library("dplyr")
children <- filter_all(titanic_df, age == "child")
children <- filter(titanic_df, age == "child")
titanic_df <- Titanic
children <- filter(titanic_df, age == "child")
children <- filter_(titanic_df, age == "child")
data <- read.csv(file = "./data/Homelessness_Count_-_USA.csv", stringsAsFactors = FALSE)
library(dplyr)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless" & col_name != "/")
write.csv(new_data, "./data/arranged_data.csv", row.names = FALSE)
county_data <- read.csv(file = "./data/county_gdp.csv", stringsAsFactors = TRUE)
filtered_county <- county_data %>%
filter(Type == "All Industries")
write.csv(county_data, "./data/arranged_county_GDP.csv", row.names = FALSE)
setwd("C:/Users/Yichi Zhang/OneDrive - UW/Soporhmre/Q1/info 201/project/info-201-AF4-project")
data <- read.csv(file = "./data/Homelessness_Count_-_USA.csv", stringsAsFactors = FALSE)
library(dplyr)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless" & col_name != "/")
write.csv(new_data, "./data/arranged_data.csv", row.names = FALSE)
county_data <- read.csv(file = "./data/county_gdp.csv", stringsAsFactors = TRUE)
filtered_county <- county_data %>%
filter(Type == "All Industries")
write.csv(county_data, "./data/arranged_county_GDP.csv", row.names = FALSE)
data <- read.csv(file = "./data/Homelessness_Count_-_USA.csv", stringsAsFactors = FALSE)
library(dplyr)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless" & col_name != "/")
write.csv(new_data, "./data/arranged_data.csv", row.names = FALSE)
county_data <- read.csv(file = "./data/county_gdp.csv", stringsAsFactors = TRUE)
filtered_county <- county_data %>%
filter(Type == "All Industries")
write.csv(county_data, "./data/arranged_county_GDP.csv", row.names = FALSE)
data <- read.csv(file = "./data/Homelessness_Count_-_USA.csv", stringsAsFactors = FALSE)
library(dplyr)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")
write.csv(new_data, "./data/arranged_data.csv", row.names = FALSE)
county_data <- read.csv(file = "./data/county_gdp.csv", stringsAsFactors = TRUE)
filtered_county <- county_data %>%
filter(Type == "All Industries")
write.csv(county_data, "./data/arranged_county_GDP.csv", row.names = FALSE)
filtered_county <- county_data %>%
filter(Type == "All Industries") %>%
filter(!grepl('/', CoC.Name))
View(county_data)
View(new_data)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")%>%
filter(!grepl('/', CoC.Name))
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")%>%
filter(!grepl('/', CoC.Name))
View(new_data)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")%>%
filter(!grepl('/', CoC.Name)) %>%
filter(!grepl('&', CoC.Name))
View(new_data)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")%>%
filter(!grepl('/', CoC.Name))
View(new_data)
new_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")
sorted_homeless_data <- data %>%
filter(Year...Text == 2015 & Attribute.Name == "Total Homeless")
#  filter rows contain certain string character
#  filter(!grepl('/', CoC.Name))
View(sorted_homeless_data)
